.TH "osea::ofreq::EquationofMotion" 3 "Sat Apr 5 2014" "Version 0.4" "oFreq" \" -*- nroff -*-
.ad l
.nh
.SH NAME
osea::ofreq::EquationofMotion \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <equationofmotion\&.h>\fP
.PP
Inherits \fBosea::ofreq::oFreqCore\fP\&.
.PP
Inherited by \fBosea::ofreq::EqnRotation\fP, and \fBosea::ofreq::EqnTranslation\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBEquationofMotion\fP (\fBMotionModel\fP *modelIn)"
.br
.RI "\fIDefault contrustor\&. Contains a reference to the motion model class which constructs it\&. \fP"
.ti -1c
.RI "\fBEquationofMotion\fP (\fBMotionModel\fP *modelIn, std::string NameIn)"
.br
.RI "\fIContrustor with name\&. Contains a reference to the motion model class which constructs it\&. \fP"
.ti -1c
.RI "\fBEquationofMotion\fP (\fBMotionModel\fP *modelIn, std::string NameIn, int IndexIn)"
.br
.RI "\fIContrustor with name and index\&. Contains a reference to the motion model class which constructs it\&. \fP"
.ti -1c
.RI "virtual \fB~EquationofMotion\fP ()"
.br
.RI "\fIDefault destructor\&. \fP"
.ti -1c
.RI "virtual std::complex< double > \fBEvaluate\fP ()"
.br
.RI "\fITriggers evaluation of the equation of motion object\&. \fP"
.ti -1c
.RI "void \fBsetDataIndex\fP (int DataIn)"
.br
.RI "\fISets the index for the equation of motion\&. \fP"
.ti -1c
.RI "int \fBgetDataIndex\fP ()"
.br
.RI "\fIGets the index for the equation of motion\&. \fP"
.ti -1c
.RI "int & \fBrefDataIndex\fP ()"
.br
.RI "\fIGets the index for the equation of motion\&. \fP"
.ti -1c
.RI "void \fBsetArguments\fP (int argn, std::vector< double > argv)"
.br
.RI "\fISets any values for arguments that may be used by the equation of motion\&. \fP"
.ti -1c
.RI "std::string & \fBrefName\fP ()"
.br
.RI "\fIThe name for the equation object\&. \fP"
.ti -1c
.RI "void \fBsetName\fP (std::string nameIn)"
.br
.RI "\fIThe name for the equation object\&. \fP"
.ti -1c
.RI "std::string & \fBrefDescription\fP ()"
.br
.RI "\fIThe description for the equation object\&. \fP"
.ti -1c
.RI "void \fBsetDescription\fP (std::string descIn)"
.br
.RI "\fIThe description for the equation object\&. \fP"
.ti -1c
.RI "void \fBsetDebugData\fP (double freqIn, std::complex< double > solnIn, bool coeffIn=false)"
.br
.RI "\fISets debugging data to use when creating fictional inputs purely for debugging this function\&. Allows the programmer to debug the function independent of the other functions which depend on it\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual std::complex< double > \fBsetFormula\fP ()"
.br
.RI "\fIThe formula used by the equation of motion\&. \fP"
.ti -1c
.RI "std::complex< double > \fBKronecker\fP (int var1, int var2, bool anti=false)"
.br
.RI "\fIThe mathematical Kronecker delta function\&. \fP"
.ti -1c
.RI "std::complex< double > \fBDdt\fP (int \fBvar\fP, int \fBord\fP, int bodIn=-1)"
.br
.RI "\fITime differential function\&. \fP"
.ti -1c
.RI "std::complex< double > \fBForceActive_hydro\fP ()"
.br
.RI "\fIA reference to the data set of the ForceActive_hydro\&. \fP"
.ti -1c
.RI "std::complex< double > \fBForceActive_user\fP ()"
.br
.RI "\fIA reference to the data set of the ForceActive_user\&. \fP"
.ti -1c
.RI "std::complex< double > \fBForceReact_hydro\fP (unsigned int ordIn, unsigned int varIn)"
.br
.RI "\fIA reference to the data set of the ForceReact_hydro\&. \fP"
.ti -1c
.RI "std::complex< double > \fBForceReact_user\fP (unsigned int ordIn, unsigned int varIn)"
.br
.RI "\fIA reference to the data set of the ForceReact_user\&. \fP"
.ti -1c
.RI "std::complex< double > \fBForceCross_hydro\fP (unsigned int bodIn, unsigned int ordIn, unsigned int varIn)"
.br
.RI "\fIA reference to the data set of the ForceCross_hydro\&. \fP"
.ti -1c
.RI "std::complex< double > \fBForceCross_user\fP (unsigned int bodIn, unsigned int ordIn, unsigned int varIn)"
.br
.RI "\fIA reference to the data set of the ForceCross_user\&. \fP"
.ti -1c
.RI "std::complex< double > \fBForceMass\fP (int varIn)"
.br
.RI "\fIA reference to the data set of the ForceMass\&. \fP"
.ti -1c
.RI "int \fBvar\fP ()"
.br
.RI "\fIReturns the index integer for iteration on variable\&. \fP"
.ti -1c
.RI "int \fBord\fP ()"
.br
.RI "\fIReturns the index integer for iteration on order of derviative\&. \fP"
.ti -1c
.RI "int \fBbody\fP ()"
.br
.RI "\fIRetuns the index integer for the body in the list of bodies\&. \fP"
.ti -1c
.RI "int \fBcurbody\fP ()"
.br
.RI "\fIReturns the index integer for the current body used by the motion model that created this equation of motion\&. \fP"
.ti -1c
.RI "std::complex< double > \fBSum\fP (std::string FuncName, std::string index, int from=-1, int to=-1)"
.br
.RI "\fISums across a variable\&. \fP"
.ti -1c
.RI "std::complex< double > \fBSum\fP (std::complex< double >(*force)(void), int from, int to)"
.br
.RI "\fISums a function multiple times\&. \fP"
.ti -1c
.RI "std::complex< double > \fBSum\fP (std::complex< double > force, int from, int to)"
.br
.RI "\fISums a constant value multiple times\&. \fP"
.ti -1c
.RI "virtual std::complex< double > \fBFunc1\fP ()"
.br
.RI "\fIFunc1 through Func50 provide user custom defined functions\&. \fP"
.ti -1c
.RI "virtual std::complex< double > \fBFunc2\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc3\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc4\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc5\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc6\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc7\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc8\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc9\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc10\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc11\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc12\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc13\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc14\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc15\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc16\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc17\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc18\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc19\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc20\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc21\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc22\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc23\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc24\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc25\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc26\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc27\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc28\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc29\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc30\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc31\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc32\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc33\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc34\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc35\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc36\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc37\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc38\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc39\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc40\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc41\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc42\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc43\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc44\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc45\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc46\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc47\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc48\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc49\fP ()"
.br
.ti -1c
.RI "virtual std::complex< double > \fBFunc50\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "int \fBargcount\fP"
.br
.RI "\fIUsed to supply arguments to the equation of motion\&. Recods the number of arguments\&. \fP"
.ti -1c
.RI "std::vector< double > \fBargvalue\fP"
.br
.RI "\fIUsed to supply arguments to the equation of motion\&. Uknown, arbitrary double precision values\&. A vector of uknown size\&. \fP"
.ti -1c
.RI "std::string \fBpName\fP"
.br
.RI "\fIThe name for the equation object\&. \fP"
.ti -1c
.RI "std::string \fBpDescription\fP"
.br
.RI "\fIThe description for the equation object\&. \fP"
.ti -1c
.RI "unsigned int \fBpCurVar\fP"
.br
.RI "\fIThe integer of the current value of \fBvar()\fP index\&. Used for iteration and summation functions\&. \fP"
.ti -1c
.RI "unsigned int \fBpCurOrd\fP"
.br
.RI "\fIThe integer of the current value of \fBord()\fP index\&. Used for iteration and summation functions\&. \fP"
.ti -1c
.RI "unsigned int \fBpBod\fP"
.br
.RI "\fIThe integer of the current body\&. Used for iteration and summation functions\&. \fP"
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static int \fBundefArg\fP = -1"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
The \fBEquation\fP of motion class defines a single equation of motion\&. Each object of the class represents a new instance\&. This is the base class, which gets inheritted by any custom class\&. The only major definition added to any inherrited class is the actual formula definition for the equation\&. It may be that the equation are repetitions of the same sequence, just with a different equation index\&. In that case, multiple instances of the same class can be created and the equation index changed\&. This can save on typing\&. Or, if the equations are truly different for each equation, you can create a separate equation of motion class for each equation, and initiate with just one object from each class\&.
.PP
In addition to the regular object entries, the class also has provision for a list of arbitrary arguments\&. 
.PP
Definition at line 101 of file equationofmotion\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "EquationofMotion::EquationofMotion (\fBMotionModel\fP *modelIn)"

.PP
Default contrustor\&. Contains a reference to the motion model class which constructs it\&. Default contrustor\&. Contains a reference to the motion model class which constructs it\&. The constructing class is necessary because several functions in the EquationOfMotion class use data in the constructing class, the motion model class\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodelIn\fP A pointer to the motion model object that created the equation of motion\&. 
.RE
.PP

.PP
Definition at line 46 of file equationofmotion\&.cpp\&.
.SS "osea::ofreq::EquationofMotion::EquationofMotion (\fBMotionModel\fP *modelIn, std::stringNameIn)"

.PP
Contrustor with name\&. Contains a reference to the motion model class which constructs it\&. Default contrustor\&. Contains a reference to the motion model class which constructs it\&. The constructing class is necessary because several functions in the EquationOfMotion class use data in the constructing class, the motion model class\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodelIn\fP A pointer to the motion model object that created the equation of motion\&. 
.br
\fINameIn\fP A name for what physical property the equation solves for\&. Used for user output\&. Not critical to program execution\&. 
.RE
.PP

.SS "osea::ofreq::EquationofMotion::EquationofMotion (\fBMotionModel\fP *modelIn, std::stringNameIn, intIndexIn)"

.PP
Contrustor with name and index\&. Contains a reference to the motion model class which constructs it\&. Default contrustor\&. Contains a reference to the motion model class which constructs it\&. The constructing class is necessary because several functions in the EquationOfMotion class use data in the constructing class, the motion model class\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodelIn\fP A pointer to the motion model object that created the equation of motion\&. 
.br
\fINameIn\fP A name for what physical property the equation solves for\&. Used for user output\&. Not critical to program execution\&. 
.br
\fIIndexIn\fP Sets the index for the \fBEquation\fP of Motion\&. The index is how the equation determines which numbers to access on the data\&. The following indices are used\&. Any higher indices can extend beyond this range, and the program easily adapts\&. But the following three are reserved\&. Unused indices are not transferred to the matrices when solved\&. So unused indices to not negatively impact calculation performance\&. However, using excessively large indices (say 500 when you only have 3 equations) will result in large matrices and unecessary memory requirements\&. THe following index reservations apply\&. 1: Translation in x-direction\&. Specific to rigid body motion\&. 2: Translation in y-direction\&. Specific to rigid body motion\&. 3: Translation in z-direction\&. Specific to rigid body motion\&. 4: Rotation about x-direction\&. Specific to rigid body motion\&. 5: Rotation about y-direction\&. Specific to rigid body motion\&. 6: Rotation about z-direction\&. Specific to rigid body motion\&. 
.RE
.PP

.SS "EquationofMotion::~EquationofMotion ()\fC [virtual]\fP"

.PP
Default destructor\&. 
.PP
Definition at line 81 of file equationofmotion\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "int EquationofMotion::body ()\fC [protected]\fP"

.PP
Retuns the index integer for the body in the list of bodies\&. This is used for summation functions when iterating through each body in the list of bodies\&. This index cannot be modified through this function\&. It is purely meant for access to the variable\&. 
.PP
\fBReturns:\fP
.RS 4
Returns the index integer for each body in the list of bodies\&. 
.RE
.PP

.PP
Definition at line 717 of file equationofmotion\&.cpp\&.
.SS "int EquationofMotion::curbody ()\fC [protected]\fP"

.PP
Returns the index integer for the current body used by the motion model that created this equation of motion\&. This index cannot be modified through this function\&. It is purely meant for access of the variable\&. 
.PP
\fBReturns:\fP
.RS 4
Returns the index integer for the current body used by the motion model that created this equation of motions\&. 
.RE
.PP

.PP
Definition at line 724 of file equationofmotion\&.cpp\&.
.SS "complex< double > EquationofMotion::Ddt (intvar, intord, intbodIn = \fC-1\fP)\fC [protected]\fP"

.PP
Time differential function\&. Time differential function\&. Used to calculate the time derivative of a reponse\&. Can convert from response amplitude to velocity to acceleration, and further\&. Used to calculated amplitude of response\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvar\fP Index of the variable to use for the time differential\&. If included with the function \fBvar()\fP, the index is automatically determined by the summation functions that you include \fBDdt()\fP into\&. 
.br
\fIord\fP Integer\&. The order of the differential\&. If the function \fBord()\fP is used, the order is automatically determined by the summation function that you include \fBDdt()\fP into\&. 
.br
\fIbodIn\fP The body to retrieve variable data for\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a complex value that is the time differential, transposed into a frequency domain\&. If absolute values of response were desired, the function will include the effects of response amplitude\&. 
.RE
.PP

.PP
Definition at line 219 of file equationofmotion\&.cpp\&.
.SS "complex< double > EquationofMotion::Evaluate ()\fC [virtual]\fP"

.PP
Triggers evaluation of the equation of motion object\&. \fBReturns:\fP
.RS 4
Returns a complex number that is the result of evaluating the equation of motion object\&. 
.RE
.PP

.PP
Definition at line 87 of file equationofmotion\&.cpp\&.
.SS "complex< double > EquationofMotion::ForceActive_hydro ()\fC [protected]\fP"

.PP
A reference to the data set of the ForceActive_hydro\&. \fBReturns:\fP
.RS 4
Returns the data set for the ForceActive_hydro\&. Indices can be specified to access individual elements\&. 
.RE
.PP

.PP
Definition at line 282 of file equationofmotion\&.cpp\&.
.SS "complex< double > EquationofMotion::ForceActive_user ()\fC [protected]\fP"

.PP
A reference to the data set of the ForceActive_user\&. \fBReturns:\fP
.RS 4
Returns the data set for the ForceActive_user\&. Indices can be specified to access individual elements\&. 
.RE
.PP

.PP
Definition at line 328 of file equationofmotion\&.cpp\&.
.SS "complex< double > EquationofMotion::ForceCross_hydro (unsigned intbodIn, unsigned intordIn, unsigned intvarIn)\fC [protected]\fP"

.PP
A reference to the data set of the ForceCross_hydro\&. \fBParameters:\fP
.RS 4
\fIbodIn\fP Integer\&. Represents the input variable for the body that the cross body force is linked to\&. 
.br
\fIordIn\fP Integer\&. Represents the input variable for the order of derivative\&. 
.br
\fIvarIn\fP Integer\&. Represents the input varaible for the variable\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the data set for the ForceCross_hydro\&. Indices can be specified to access individual elements\&. 
.RE
.PP

.PP
Definition at line 492 of file equationofmotion\&.cpp\&.
.SS "complex< double > EquationofMotion::ForceCross_user (unsigned intbodIn, unsigned intordIn, unsigned intvarIn)\fC [protected]\fP"

.PP
A reference to the data set of the ForceCross_user\&. \fBParameters:\fP
.RS 4
\fIbodIn\fP Integer\&. Represents the input variable for the body that the cross body force is linked to\&. 
.br
\fIordIn\fP Integer\&. Represents the input variable for the order of derivative\&. 
.br
\fIvarIn\fP Integer\&. Represents the input varaible for the variable\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the data set for the ForceCross_user\&. Indices can be specified to access individual elements\&. 
.RE
.PP

.PP
Definition at line 556 of file equationofmotion\&.cpp\&.
.SS "complex< double > EquationofMotion::ForceMass (intvarIn)\fC [protected]\fP"

.PP
A reference to the data set of the ForceMass\&. \fBParameters:\fP
.RS 4
\fIvarIn\fP Integer\&. Represents the input index for the variable\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the data set for the ForceMass\&. Indices can be specified to access individual elements\&. 
.RE
.PP

.PP
Definition at line 619 of file equationofmotion\&.cpp\&.
.SS "complex< double > EquationofMotion::ForceReact_hydro (unsigned intordIn, unsigned intvarIn)\fC [protected]\fP"

.PP
A reference to the data set of the ForceReact_hydro\&. \fBParameters:\fP
.RS 4
\fIordIn\fP Integer\&. Represents the input variable for the order of derivative\&. 
.br
\fIvarIn\fP Integer\&. Represents the input varaible for the variable\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the data set for the ForceReact_hydro\&. Indices can be specified to access individual elements\&. 
.RE
.PP

.PP
Definition at line 378 of file equationofmotion\&.cpp\&.
.SS "complex< double > EquationofMotion::ForceReact_user (unsigned intordIn, unsigned intvarIn)\fC [protected]\fP"

.PP
A reference to the data set of the ForceReact_user\&. \fBParameters:\fP
.RS 4
\fIordIn\fP Integer\&. Represents the input variable for the order of derivative\&. 
.br
\fIvarIn\fP Integer\&. Represents the input varaible for the variable\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the data set for the ForceReact_user\&. Indices can be specified to access individual elements\&. 
.RE
.PP

.PP
Definition at line 435 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func1 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Func1 through Func50 provide user custom defined functions\&. These are custom functions that the user may need to create to define their equations of motion\&. The only restriction is that the functions can not take any arguments\&. Any arguments required must be supplied through a set of global variables\&. Sorry, that's just a restriction of how the code is written and the use of the C++ language\&. 
.PP
\fBReturns:\fP
.RS 4
Returns a complex<double> variable\&. Returned variabled passed by value\&. 
.RE
.PP

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 884 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func10 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 938 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func11 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 944 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func12 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 950 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func13 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 956 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func14 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 962 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func15 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 968 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func16 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 974 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func17 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 980 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func18 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 986 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func19 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 992 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func2 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 890 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func20 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 998 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func21 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1004 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func22 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1010 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func23 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1016 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func24 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1022 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func25 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1028 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func26 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1034 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func27 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1040 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func28 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1046 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func29 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1052 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func3 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 896 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func30 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1058 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func31 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1064 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func32 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1070 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func33 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1076 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func34 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1082 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func35 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1088 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func36 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1094 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func37 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1100 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func38 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1106 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func39 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1112 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func4 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 902 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func40 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1118 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func41 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1124 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func42 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1130 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func43 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1136 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func44 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1142 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func45 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1148 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func46 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1154 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func47 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1160 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func48 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1166 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func49 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1172 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func5 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 908 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func50 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 1178 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func6 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 914 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func7 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 920 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func8 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 926 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Func9 ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 932 of file equationofmotion\&.cpp\&.
.SS "int EquationofMotion::getDataIndex ()"

.PP
Gets the index for the equation of motion\&. Gets the index for the equation of motion\&. The index is how the equation determines which numbers to access on the data\&. The following indices are used\&. Any higher indices can extend beyond this range, and the program easily adapts\&. But the following three are reserved\&. Unused indices are not transferred to the matrices when solved\&. So unused indices to not negatively impact calculation performance\&. However, using excessively large indices (say 500 when you only have 3 equations) will result in large matrices and unecessary memory requirements\&. THe following index reservations apply\&. 1: Translation in x-direction\&. Specific to rigid body motion\&. 2: Translation in y-direction\&. Specific to rigid body motion\&. 3: Translation in z-direction\&. Specific to rigid body motion\&. 4: Rotation about x-direction\&. Specific to rigid body motion\&. 5: Rotation about y-direction\&. Specific to rigid body motion\&. 6: Rotation about z-direction\&. Specific to rigid body motion\&. 
.PP
\fBReturns:\fP
.RS 4
Returns an integer number representing the data index used by the equation\&. 
.RE
.PP

.PP
Definition at line 109 of file equationofmotion\&.cpp\&.
.SS "complex< double > EquationofMotion::Kronecker (intvar1, intvar2, boolanti = \fCfalse\fP)\fC [protected]\fP"

.PP
The mathematical Kronecker delta function\&. The mathematical Kronecker-delta function\&. Used to filter out terms when doing a double summation between two indices\&. The function evaluates to one when the two indices are equal, and evaluates to zero any other time\&. Multiplying a term by the Kronecker delta ensures that the results will be filtered to only have terms of equal indices\&. If this relates back to a matrix, the kronecked delta filters the deta to only include diagonal terms\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvar1\fP Integer variable\&. The first index that is being summed across\&. 
.br
\fIvar2\fP Integer variable\&. The second index that is being summed across\&. 
.br
\fIanti\fP Boolean variable\&. Sometimes the researcher may be interested in the off diagonal terms\&. Cases when var1 does not equatl var2\&. In those cases, the Kronecker delta function should work in reverse and filter out the diagonal terms in a matrix\&. The anti variable is a trigger for the Kronecker delta function to work in reverse of its normal method\&. The default setting for this variable is false\&. By default, the Kronecker delta function evaluates with one when var1 = var2\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Complex number\&. Evaluates to either zero (0 + 0j), or one (1 + 0j)\&. 
.RE
.PP

.PP
Definition at line 192 of file equationofmotion\&.cpp\&.
.SS "int EquationofMotion::ord ()\fC [protected]\fP"

.PP
Returns the index integer for iteration on order of derviative\&. Returned variable is expressed in human numbering\&. But in this case, the order of 0 is a valid number\&. So numbering starts from zero (0)\&. 
.PP
\fBReturns:\fP
.RS 4
Returns the index integer for iteration on order of derviative\&. 
.RE
.PP

.PP
Definition at line 709 of file equationofmotion\&.cpp\&.
.SS "int & EquationofMotion::refDataIndex ()"

.PP
Gets the index for the equation of motion\&. Gets the index for the equation of motion\&. The index is how the equation determines which numbers to access on the data\&. The following indices are used\&. Any higher indices can extend beyond this range, and the program easily adapts\&. But the following three are reserved\&. Unused indices are not transferred to the matrices when solved\&. So unused indices to not negatively impact calculation performance\&. However, using excessively large indices (say 500 when you only have 3 equations) will result in large matrices and unecessary memory requirements\&. THe following index reservations apply\&. 1: Translation in x-direction\&. Specific to rigid body motion\&. 2: Translation in y-direction\&. Specific to rigid body motion\&. 3: Translation in z-direction\&. Specific to rigid body motion\&. 4: Rotation about x-direction\&. Specific to rigid body motion\&. 5: Rotation about y-direction\&. Specific to rigid body motion\&. 6: Rotation about z-direction\&. Specific to rigid body motion\&. 
.PP
\fBReturns:\fP
.RS 4
Returns a reference to the protected data index variable contained in the class\&. 
.RE
.PP

.PP
Definition at line 117 of file equationofmotion\&.cpp\&.
.SS "string & EquationofMotion::refDescription ()"

.PP
The description for the equation object\&. The description for the equation object\&. This is an expanded version of the name\&. Again, purely for user identification of the \fBEquationofMotion\fP object\&. Brief names go under the Name property\&. More extensive descriptions go under this property\&. These would be useful to the user for describing the physical meaning behind the equation of motion\&. 
.PP
\fBReturns:\fP
.RS 4
Returns reference to the protected pDescription variable\&. 
.RE
.PP

.PP
Definition at line 157 of file equationofmotion\&.cpp\&.
.SS "string & EquationofMotion::refName ()"

.PP
The name for the equation object\&. The name for the equation object\&. This is the short name that user will use to identify the meaning of the equation\&. 
.PP
\fBReturns:\fP
.RS 4
Returns reference to the protected pName variable\&. 
.RE
.PP

.PP
Definition at line 144 of file equationofmotion\&.cpp\&.
.SS "void EquationofMotion::setArguments (intargn, std::vector< double >argv)"

.PP
Sets any values for arguments that may be used by the equation of motion\&. Sets any values for arguments that may be used by the equation of motion\&. These can be any numerical value as needed by the equation of motion\&. 
.PP
\fBParameters:\fP
.RS 4
\fIargn\fP The number of arguments to expect\&. 
.br
\fIargv\fP The vector containing the argument values\&. 
.RE
.PP

.PP
Definition at line 136 of file equationofmotion\&.cpp\&.
.SS "void EquationofMotion::setDataIndex (intDataIn)"

.PP
Sets the index for the equation of motion\&. Sets the index for the equation of motion\&. The index is how the equation determines which numbers to access on the data\&. The following indices are used\&. Any higher indices can extend beyond this range, and the program easily adapts\&. But the following three are reserved\&. Unused indices are not transferred to the matrices when solved\&. So unused indices to not negatively impact calculation performance\&. However, using excessively large indices (say 500 when you only have 3 equations) will result in large matrices and unecessary memory requirements\&. THe following index reservations apply\&. 1: Translation in x-direction\&. Specific to rigid body motion\&. 2: Translation in y-direction\&. Specific to rigid body motion\&. 3: Translation in z-direction\&. Specific to rigid body motion\&. 4: Rotation about x-direction\&. Specific to rigid body motion\&. 5: Rotation about y-direction\&. Specific to rigid body motion\&. 6: Rotation about z-direction\&. Specific to rigid body motion\&. 
.PP
\fBParameters:\fP
.RS 4
\fIDataIn\fP The integer of the data index to use\&. 
.RE
.PP

.PP
Definition at line 102 of file equationofmotion\&.cpp\&.
.SS "void EquationofMotion::setDebugData (doublefreqIn, std::complex< double >solnIn, boolcoeffIn = \fCfalse\fP)"

.PP
Sets debugging data to use when creating fictional inputs purely for debugging this function\&. Allows the programmer to debug the function independent of the other functions which depend on it\&. \fBParameters:\fP
.RS 4
\fIfreqIn\fP Wave Frequency\&. Double\&. Variable passed by value\&. 
.br
\fIsolnIn\fP \fBSolution\fP of motion\&. Complex, double variable\&. Variable passed by value\&. 
.br
\fIcoeffIn\fP Boolean to describe if Ddt should calculate coefficients only\&. False by default\&. 
.RE
.PP

.PP
Definition at line 170 of file equationofmotion\&.cpp\&.
.SS "void EquationofMotion::setDescription (std::stringdescIn)"

.PP
The description for the equation object\&. This is an expanded version of the name\&. Again, purely for user identification of the \fBEquationofMotion\fP object\&. Brief names go under the Name property\&. More extensive descriptions go under this property\&. These would be useful to the user for describing the physical meaning behind the equation of motion\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdescIn\fP String\&. The variable used to specify the description for the equation of motion\&. Variable passed by value\&. 
.RE
.PP

.PP
Definition at line 164 of file equationofmotion\&.cpp\&.
.SS "complex< double > EquationofMotion::setFormula ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
The formula used by the equation of motion\&. The formula used by the equation of motion\&. The formula gets rewritten in a unique form\&. Rearrange any equations so that they have zero on the right hand size\&.
.PP
Example: If the formula were Ax + By = F, it must be rearranged to: Ax + By - F = 0
.PP
The formula can also make use of several math functions provided by the equation of motion object\&. 
.PP
Reimplemented in \fBosea::ofreq::EqnTranslation\fP, and \fBosea::ofreq::EqnRotation\fP\&.
.PP
Definition at line 181 of file equationofmotion\&.cpp\&.
.SS "void EquationofMotion::setName (std::stringnameIn)"

.PP
The name for the equation object\&. This is the short name that user will use to identify the meaning of the equation\&. 
.PP
\fBParameters:\fP
.RS 4
\fInameIn\fP String\&. The variable which specifies the short name for the equation of motion\&. Variable passed by value\&. 
.RE
.PP

.PP
Definition at line 151 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Sum (std::stringFuncName, std::stringindex, intfrom = \fC-1\fP, intto = \fC-1\fP)\fC [protected]\fP"

.PP
Sums across a variable\&. Sums across a variable\&. The index limits can be specified\&. Or the keyword functions can be used to automatically Sum across the entire index range\&. This implementation accepts the name which specifies one of 50 available functions\&. The functions are not defined\&. The user must define the function and then specify the function name to use that function in the Sum function\&. Sum functions can be nested within other function definitions\&. 
.PP
\fBParameters:\fP
.RS 4
\fIFuncName\fP String which specifies the name of the function you wish to use as input to the summation\&. Example: Sum('Func1()', \&.\&.\&.)\&. The specified function name must be one of the available functions\&. ('Func1(),
'\fBFunc2()\fP', \&.\&.\&. '\fBFunc50()\fP") None of the functions can accept input parameters\&. But you can use the input parameters already defined within the class\&. Output for any function definition must always be data type of std::complex<double>\&. 
.br
\fIindex\fP std::string specifying which variable should be summed on\&. This may be any one of these options: Order of derivative = 'ord' Variable = 'var' \fBBody\fP = 'bod' 
.br
\fIfrom\fP Integer for the beginning value of the summation\&. Default value of negative one (-1) indicates that the summation will happen at the lowest value of the variable index specified\&. 
.br
\fIto\fP Integer for the ending value of the summation\&. Default value of negative one (-1) indicates that the summation will happen at the highest value of the variable index specified\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a complex value that is the summation of the index and limits specified\&. 
.RE
.PP

.PP
Definition at line 750 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Sum (std::complex< double >(*)(void)force, intfrom, intto)\fC [protected]\fP"

.PP
Sums a function multiple times\&. The index limits can be specified\&. Or the keyword functions can be used to automatically Sum across the entire index range\&. This implementation accepts a function pointer with no parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIforce\fP Input to specify which items the results should Sum across\&. Typically, this is one of the built-in force functions\&. However, it can be any function, any item, any calculation\&. The only catch is that the input value must be a std::complex<double> data type\&. Input format is a function pointer\&. This allows the Sum function to update as it performs iterations\&. The only catch is that you can not combine multiple values into one\&. You must define a single function for each input argument you want\&. 
.br
\fIfrom\fP Integer for the beginning value of the summation\&. 
.br
\fIto\fP Integer for the ending value of the summation\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a complex value that is the summation of the index and limits specified\&. 
.RE
.PP

.PP
Definition at line 854 of file equationofmotion\&.cpp\&.
.SS "std::complex< double > EquationofMotion::Sum (std::complex< double >force, intfrom, intto)\fC [protected]\fP"

.PP
Sums a constant value multiple times\&. The index limits can be specified\&. Or the keyword functions can be used to automatically Sum across the entire index range\&. 
.PP
\fBParameters:\fP
.RS 4
\fIforce\fP Input to specify constant value that Sum should add\&. The only catch is that the input value must be a std::complex<double> data type\&. Input format is a variabled passed by value\&. 
.br
\fIfrom\fP Integer for the beginning value of the summation\&. 
.br
\fIto\fP Integer for the ending value of the summation\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a complex value that is the summation of the index and limits specified\&. 
.RE
.PP

.PP
Definition at line 869 of file equationofmotion\&.cpp\&.
.SS "int EquationofMotion::var ()\fC [protected]\fP"

.PP
Returns the index integer for iteration on variable\&. Returned value is expressed in human numbering\&. So numbering starts from 1\&. 
.PP
\fBReturns:\fP
.RS 4
Returns the index integer for iteration on variable\&. 
.RE
.PP

.PP
Definition at line 669 of file equationofmotion\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "int osea::ofreq::EquationofMotion::argcount\fC [protected]\fP"

.PP
Used to supply arguments to the equation of motion\&. Recods the number of arguments\&. Used to supply arguments to the equation of motion\&. Recods the number of arguments\&. Not required for use of the equation of motion object\&. 
.PP
Definition at line 411 of file equationofmotion\&.h\&.
.SS "std::vector<double> osea::ofreq::EquationofMotion::argvalue\fC [protected]\fP"

.PP
Used to supply arguments to the equation of motion\&. Uknown, arbitrary double precision values\&. A vector of uknown size\&. Used to supply arguments to the equation of motion\&. Uknown, arbitrary double precision values\&. A vector of uknown size\&. Not required for use fo the equation of motion object\&. 
.PP
Definition at line 421 of file equationofmotion\&.h\&.
.SS "unsigned int osea::ofreq::EquationofMotion::pBod\fC [protected]\fP"

.PP
The integer of the current body\&. Used for iteration and summation functions\&. 
.PP
Definition at line 557 of file equationofmotion\&.h\&.
.SS "unsigned int osea::ofreq::EquationofMotion::pCurOrd\fC [protected]\fP"

.PP
The integer of the current value of \fBord()\fP index\&. Used for iteration and summation functions\&. 
.PP
Definition at line 551 of file equationofmotion\&.h\&.
.SS "unsigned int osea::ofreq::EquationofMotion::pCurVar\fC [protected]\fP"

.PP
The integer of the current value of \fBvar()\fP index\&. Used for iteration and summation functions\&. 
.PP
Definition at line 545 of file equationofmotion\&.h\&.
.SS "std::string osea::ofreq::EquationofMotion::pDescription\fC [protected]\fP"

.PP
The description for the equation object\&. The description for the equation object\&. This is an expanded version of the name\&. Again, purely for user identification of the \fBEquationofMotion\fP object\&. Brief names go under the Name property\&. More extensive descriptions go under this property\&. These would be useful to the user for describing the physical meaning behind the equation of motion\&. 
.PP
Definition at line 481 of file equationofmotion\&.h\&.
.SS "std::string osea::ofreq::EquationofMotion::pName\fC [protected]\fP"

.PP
The name for the equation object\&. The name for the equation object\&. This is the short name that user will use to identify the meaning of the equation\&. 
.PP
Definition at line 470 of file equationofmotion\&.h\&.
.SS "int EquationofMotion::undefArg = -1\fC [static]\fP, \fC [protected]\fP"
Integer value for undefined argument in the summation function\&. 
.PP
Definition at line 561 of file equationofmotion\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for oFreq from the source code\&.

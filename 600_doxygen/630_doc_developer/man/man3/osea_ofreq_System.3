.TH "osea::ofreq::System" 3 "Sat Apr 5 2014" "Version 0.4" "oFreq" \" -*- nroff -*-
.ad l
.nh
.SH NAME
osea::ofreq::System \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <system\&.h>\fP
.PP
Inherits QObject, and \fBosea::ofreq::oFreqCore\fP\&.
.SS "Public Slots"

.in +1c
.ti -1c
.RI "void \fBsetAnalysisType\fP (std::string)"
.br
.ti -1c
.RI "void \fBaddBody\fP (\fBBody\fP input)"
.br
.RI "\fIAdds another \fBBody\fP object to the list of \fBBody\fP objects\&. Sets the new \fBBody\fP object equal to the input\&. \fP"
.ti -1c
.RI "void \fBaddBody\fP ()"
.br
.RI "\fIAdds another \fBBody\fP object to the list of \fBBody\fP objects\&. Uses a blank new \fBBody\fP object\&. \fP"
.ti -1c
.RI "void \fBaddOutput\fP (\fBOutputsBody\fP input)"
.br
.RI "\fIAdds another \fBOutputsBody\fP object to the list of \fBOutputsBody\fP objects\&. Sets the object equal to the input\&. \fP"
.ti -1c
.RI "void \fBaddOutput\fP ()"
.br
.RI "\fIAdds another \fBOutputsBody\fP object to the list of \fBOutputsBody\fP objects\&. Uses a blank new \fBOutputsBody\fP object\&. \fP"
.ti -1c
.RI "void \fBaddForceActive_user\fP (\fBForceActive\fP input)"
.br
.RI "\fIAdds another \fBForceActive\fP object to the list of forceActive_user objects\&. Sets the object equal to the input\&. \fP"
.ti -1c
.RI "void \fBaddForceActive_user\fP ()"
.br
.RI "\fIAdds another \fBForceActive\fP Object to the list of forceActive_user objects\&. Uses a blank new \fBForceActive\fP object\&. \fP"
.ti -1c
.RI "void \fBaddForceReact_user\fP (\fBForceReact\fP input)"
.br
.RI "\fIAdds another \fBForceReact\fP object to the list of forceReact_user objects\&. Sets the object equal to the input\&. \fP"
.ti -1c
.RI "void \fBaddForceReact_user\fP ()"
.br
.RI "\fIAdds another \fBForceReact\fP Object to the list of forceReact_user objects\&. Uses a blank new \fBForceReact\fP object\&. \fP"
.ti -1c
.RI "void \fBaddForceCross_user\fP (\fBForceCross\fP input)"
.br
.RI "\fIAdds another \fBForceCross\fP object to the list of forceCross_user objects\&. Sets the object equal to the input\&. \fP"
.ti -1c
.RI "void \fBaddForceCross_user\fP ()"
.br
.RI "\fIAdds another \fBForceCross\fP Object to the list of forceCross_user objects\&. Uses a blank new \fBForceCross\fP object\&. \fP"
.ti -1c
.RI "void \fBlinkBodies\fP (int bodID)"
.br
.RI "\fIThis converts the cross-body force links from simple identification by name into actual pointers to each body\&. The linkBodies command must exist so that all bodies can be read into the program before linking takes place\&. This command searches through the list of bodies to get a matching body name and creates a pointer link to that body\&. At the end, it clears the list of names for linked bodies, to reduce memory requirements\&. \fP"
.ti -1c
.RI "std::vector< \fBMotionModel\fP * > & \fBlistModel\fP ()"
.br
.RI "\fIProvides access to the full list of motion models\&. \fP"
.ti -1c
.RI "\fBofreq::MotionModel\fP & \fBlistModel\fP (unsigned int index)"
.br
.RI "\fIProvides access to one item in the list of motion models\&. \fP"
.ti -1c
.RI "\fBofreq::MotionModel\fP & \fBlistModel\fP (std::string modelName)"
.br
.RI "\fIProvides access to one item in the list of motion models\&. \fP"
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBReferenceSystem\fP (\fBSystem\fP *mySystem)"
.br
.RI "\fIReturns the \fBSystem\fP object for information\&. Used mainly to access the list of forced defined for the system object\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSystem\fP ()"
.br
.ti -1c
.RI "virtual \fB~System\fP ()"
.br
.ti -1c
.RI "void \fBsetWaveFrequencies\fP (std::vector< double >)"
.br
.ti -1c
.RI "void \fBsetWaveDirections\fP (std::vector< double >)"
.br
.ti -1c
.RI "void \fBsetSpreadModel\fP (std::string)"
.br
.ti -1c
.RI "std::vector< double > \fBgetWaveFrequencies\fP ()"
.br
.ti -1c
.RI "std::vector< double > & \fBlistWaveFrequencies\fP ()"
.br
.RI "\fIProvides direct access to the list of wave frequencies\&. \fP"
.ti -1c
.RI "std::vector< double > \fBgetWaveDirections\fP ()"
.br
.ti -1c
.RI "std::vector< double > & \fBlistWaveDirections\fP ()"
.br
.RI "\fIProvides direct access to the list of wave directions\&. \fP"
.ti -1c
.RI "void \fBsetCurWaveDirInd\fP (int input)"
.br
.RI "\fISets the current wave index\&. \fP"
.ti -1c
.RI "void \fBsetCurFreqInd\fP (int input)"
.br
.RI "\fISets the current frequency index\&. \fP"
.ti -1c
.RI "int \fBgetCurWaveDirInd\fP ()"
.br
.RI "\fIReturns the current wave direction index\&. \fP"
.ti -1c
.RI "int \fBgetCurFreqInd\fP ()"
.br
.RI "\fIReturns the current wave frequency index\&. \fP"
.ti -1c
.RI "double \fBgetCurWaveDir\fP ()"
.br
.RI "\fIReturns the current wave direction\&. Actual value of wave direction angle\&. Angle specified as radians with zero as True North, positive counter-clockwise\&. \fP"
.ti -1c
.RI "double \fBgetCurFreq\fP ()"
.br
.RI "\fIReturns the current wave frequency\&. Actual value of the wave frequency\&. Value specified with units of radians per second\&. \fP"
.ti -1c
.RI "std::vector< \fBBody\fP > & \fBlistBody\fP ()"
.br
.RI "\fIReturns direct access to the list of \fBBody\fP objects\&. Includes all the properties included by a std::vector<> class\&. \fP"
.ti -1c
.RI "\fBBody\fP & \fBlistBody\fP (int input)"
.br
.RI "\fIReturns direct access to a single \fBBody\fP object\&. \fP"
.ti -1c
.RI "std::vector< \fBOutputsBody\fP > & \fBlistOutput\fP ()"
.br
.RI "\fIReturns direct access to the list of \fBOutputsBody\fP objects\&. Includes all the properties included by a std::vector<> class\&. \fP"
.ti -1c
.RI "\fBOutputsBody\fP & \fBlistOutput\fP (int input)"
.br
.RI "\fIReturns direct access to a single \fBOutputsBody\fP object\&. \fP"
.ti -1c
.RI "void \fBclearForce\fP (std::string forceClass='')"
.br
.RI "\fIClears the vector of force objects for the specified force type\&. This is useful to free system memory\&. \fBForce\fP type is specified by a std::string input\&. If no std::string input is supplied, all force objects are cleared from the system object\&. All force objects should already be copied to their respective \fBBody\fP objects before issuing this function\&. \fP"
.ti -1c
.RI "\fBForceActive\fP * \fBrefForceActive_user\fP (std::string forceName)"
.br
.RI "\fIGets the forceActive_user object referenced by the name specified in the input\&. The Bodies input file will define the forceActive_user object by a name\&. This uses that name to retrieve the forceActive_user object\&. \fP"
.ti -1c
.RI "std::vector< \fBForceActive\fP > & \fBlistForceActive_user\fP ()"
.br
.RI "\fIExposes the vector of forceActive_user objects\&. Provides direct access to the vector\&. \fP"
.ti -1c
.RI "\fBForceActive\fP & \fBlistForceActive_user\fP (unsigned int forceIndex)"
.br
.RI "\fIReturns reference to the forceActive_user object referenced by the index specified in the input\&. \fP"
.ti -1c
.RI "\fBForceReact\fP * \fBrefForceReact_user\fP (std::string forceName)"
.br
.RI "\fIGets the forceReact_user object referenced by the name specified in the input\&. The Bodies input file will define the forceReact_user object by a name\&. This uses that name to retrieve the forceReact_user object\&. \fP"
.ti -1c
.RI "std::vector< \fBForceReact\fP > & \fBlistForceReact_user\fP ()"
.br
.RI "\fIExposes the vector of forceReact_user objects\&. Provides direct access to the vector\&. \fP"
.ti -1c
.RI "\fBForceReact\fP & \fBlistForceReact_user\fP (unsigned int forceIndex)"
.br
.RI "\fIReturns reference to the forceReact_user object referenced by the index specified in the input\&. \fP"
.ti -1c
.RI "\fBForceCross\fP * \fBrefForceCross_user\fP (std::string forceName)"
.br
.RI "\fIGets the forceCross_user object referenced by the name specified in the input\&. The Bodies input file will define the forceCross_user object by a name\&. This uses that name to retrieve the forceCross_user object\&. \fP"
.ti -1c
.RI "std::vector< \fBForceCross\fP > & \fBlistForceCross_user\fP ()"
.br
.RI "\fIExposes the vector of forceCross_user objects\&. Provides direct access to the vector\&. \fP"
.ti -1c
.RI "\fBForceCross\fP & \fBlistForceCross_user\fP (unsigned int forceIndex)"
.br
.RI "\fIReturns reference to the forceCross_user object referenced by the index specified in the input\&. \fP"
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This class holds data for the system object\&. The system object controls the overall behavior of the program\&. It also decides which analysis type to run: motion or resonant frequency\&. The system object controls the current wave environment settings\&. 
.PP
Definition at line 98 of file system\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "System::System ()"
The default constructor\&. 
.PP
Definition at line 42 of file system\&.cpp\&.
.SS "System::~System ()\fC [virtual]\fP"
The default destructor, clears any dynamic memory\&. 
.PP
Definition at line 49 of file system\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void System::addBody (\fBBody\fPinput)\fC [slot]\fP"

.PP
Adds another \fBBody\fP object to the list of \fBBody\fP objects\&. Sets the new \fBBody\fP object equal to the input\&. \fBParameters:\fP
.RS 4
\fIinput\fP \fBBody\fP object to add into the list of stored \fBBody\fP objects\&. Variable is passed by value and stored independant inside the \fBSystem\fP class\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBBody\fP 
.RE
.PP

.PP
Definition at line 336 of file system\&.cpp\&.
.SS "void System::addBody ()\fC [slot]\fP"

.PP
Adds another \fBBody\fP object to the list of \fBBody\fP objects\&. Uses a blank new \fBBody\fP object\&. \fBSee Also:\fP
.RS 4
\fBBody\fP 
.RE
.PP

.PP
Definition at line 345 of file system\&.cpp\&.
.SS "void System::addForceActive_user (\fBForceActive\fPinput)\fC [slot]\fP"

.PP
Adds another \fBForceActive\fP object to the list of forceActive_user objects\&. Sets the object equal to the input\&. \fBParameters:\fP
.RS 4
\fIinput\fP \fBForceActive\fP object to add to the list of forceActive_user objects\&. Variable is passed by value and stored independant inside the \fBSystem\fP class\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBForceActive\fP 
.RE
.PP

.PP
Definition at line 366 of file system\&.cpp\&.
.SS "void System::addForceActive_user ()\fC [slot]\fP"

.PP
Adds another \fBForceActive\fP Object to the list of forceActive_user objects\&. Uses a blank new \fBForceActive\fP object\&. \fBSee Also:\fP
.RS 4
\fBForceActive\fP 
.RE
.PP

.PP
Definition at line 372 of file system\&.cpp\&.
.SS "void System::addForceCross_user (\fBForceCross\fPinput)\fC [slot]\fP"

.PP
Adds another \fBForceCross\fP object to the list of forceCross_user objects\&. Sets the object equal to the input\&. \fBParameters:\fP
.RS 4
\fIinput\fP \fBForceCross\fP object to add to the list of forceCross_user objects\&. Variable is passed by value and stored independant inside the \fBSystem\fP class\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBForceCross\fP 
.RE
.PP

.PP
Definition at line 390 of file system\&.cpp\&.
.SS "void System::addForceCross_user ()\fC [slot]\fP"

.PP
Adds another \fBForceCross\fP Object to the list of forceCross_user objects\&. Uses a blank new \fBForceCross\fP object\&. \fBSee Also:\fP
.RS 4
\fBForceCross\fP 
.RE
.PP

.PP
Definition at line 396 of file system\&.cpp\&.
.SS "void System::addForceReact_user (\fBForceReact\fPinput)\fC [slot]\fP"

.PP
Adds another \fBForceReact\fP object to the list of forceReact_user objects\&. Sets the object equal to the input\&. \fBParameters:\fP
.RS 4
\fIinput\fP \fBForceReact\fP object to add to the list of forceReact_user objects\&. Variable is passed by value and stored independant inside the \fBSystem\fP class\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBForceReact\fP 
.RE
.PP

.PP
Definition at line 378 of file system\&.cpp\&.
.SS "void System::addForceReact_user ()\fC [slot]\fP"

.PP
Adds another \fBForceReact\fP Object to the list of forceReact_user objects\&. Uses a blank new \fBForceReact\fP object\&. \fBSee Also:\fP
.RS 4
\fBForceReact\fP 
.RE
.PP

.PP
Definition at line 384 of file system\&.cpp\&.
.SS "void System::addOutput (\fBOutputsBody\fPinput)\fC [slot]\fP"

.PP
Adds another \fBOutputsBody\fP object to the list of \fBOutputsBody\fP objects\&. Sets the object equal to the input\&. \fBParameters:\fP
.RS 4
\fIinput\fP \fBOutputsBody\fP object to add into the list of stored \fBOutputsBody\fP objects\&. Variable is passed by value and sotred independant inside the \fBSystem\fP class\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBOutputsBody\fP 
.RE
.PP

.PP
Definition at line 354 of file system\&.cpp\&.
.SS "void System::addOutput ()\fC [slot]\fP"

.PP
Adds another \fBOutputsBody\fP object to the list of \fBOutputsBody\fP objects\&. Uses a blank new \fBOutputsBody\fP object\&. \fBSee Also:\fP
.RS 4
\fBOutputsBody\fP 
.RE
.PP

.PP
Definition at line 360 of file system\&.cpp\&.
.SS "void System::clearForce (std::stringforceClass = \fC''\fP)"

.PP
Clears the vector of force objects for the specified force type\&. This is useful to free system memory\&. \fBForce\fP type is specified by a std::string input\&. If no std::string input is supplied, all force objects are cleared from the system object\&. All force objects should already be copied to their respective \fBBody\fP objects before issuing this function\&. \fBParameters:\fP
.RS 4
\fIforceClass\fP std::string input designating which force object type to clear\&. Valid values are: \fBForceActive\fP: Clears the \fBForceActive\fP class of objects\&. \fBForceReact\fP: Clears the \fBForceReact\fP class of objects\&. \fBForceCross\fP: Clears the \fBForceCross\fP class of objects\&. '': Clears all three object classes of objects\&. other: If an unknown input is encountered, no objects are cleared\&. 
.RE
.PP

.PP
Definition at line 162 of file system\&.cpp\&.
.SS "double System::getCurFreq ()"

.PP
Returns the current wave frequency\&. Actual value of the wave frequency\&. Value specified with units of radians per second\&. \fBReturns:\fP
.RS 4
Double\&. Returns the current wave frequency\&. Actual value of the wave frequency\&. Value specified with units of radians per second\&. 
.RE
.PP

.PP
Definition at line 132 of file system\&.cpp\&.
.SS "int System::getCurFreqInd ()"

.PP
Returns the current wave frequency index\&. \fBReturns:\fP
.RS 4
Integer\&. Returns the current wave frequency index\&. Variable passed by value\&. 
.RE
.PP

.PP
Definition at line 120 of file system\&.cpp\&.
.SS "double System::getCurWaveDir ()"

.PP
Returns the current wave direction\&. Actual value of wave direction angle\&. Angle specified as radians with zero as True North, positive counter-clockwise\&. \fBReturns:\fP
.RS 4
Double\&. Returns the current wave direction\&. Actual value of wave direction angle\&. Angle specified as radians with zero as True North, positive counter-clockwise\&. Variable passed by value\&. 
.RE
.PP

.PP
Definition at line 126 of file system\&.cpp\&.
.SS "int System::getCurWaveDirInd ()"

.PP
Returns the current wave direction index\&. \fBReturns:\fP
.RS 4
Integer\&. Returns the current wave direction index\&. Variable passed by value\&. 
.RE
.PP

.PP
Definition at line 114 of file system\&.cpp\&.
.SS "vector< double > System::getWaveDirections ()"
Retrieve the list of wave directions\&. 
.PP
\fBReturns:\fP
.RS 4
The list of wave directions\&. 
.RE
.PP

.PP
Definition at line 90 of file system\&.cpp\&.
.SS "vector< double > System::getWaveFrequencies ()"
Retrieve the list of wave frequencies\&. 
.PP
\fBReturns:\fP
.RS 4
The list of wave frequencies\&. 
.RE
.PP

.PP
Definition at line 78 of file system\&.cpp\&.
.SS "void System::linkBodies (intbodID)\fC [slot]\fP"

.PP
This converts the cross-body force links from simple identification by name into actual pointers to each body\&. The linkBodies command must exist so that all bodies can be read into the program before linking takes place\&. This command searches through the list of bodies to get a matching body name and creates a pointer link to that body\&. At the end, it clears the list of names for linked bodies, to reduce memory requirements\&. \fBParameters:\fP
.RS 4
\fIbodID\fP An integer variable that describes the base body which the function should process all links for\&. parameter passed by value\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBBody::listNamedLink_user()\fP 
.PP
\fBBody::listNamedLink_hydro()\fP; 
.RE
.PP

.PP
Definition at line 402 of file system\&.cpp\&.
.SS "vector< \fBBody\fP > & System::listBody ()"

.PP
Returns direct access to the list of \fBBody\fP objects\&. Includes all the properties included by a std::vector<> class\&. \fBReturns:\fP
.RS 4
Returns a vector of \fBBody\fP objects\&. Returned variable passed by reference\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBBody\fP 
.RE
.PP

.PP
Definition at line 138 of file system\&.cpp\&.
.SS "\fBBody\fP & System::listBody (intinput)"

.PP
Returns direct access to a single \fBBody\fP object\&. \fBParameters:\fP
.RS 4
\fIinput\fP Specifies index of which \fBBody\fP object to access in the list of \fBBody\fP objects\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a \fBBody\fP object\&. Returned variable is passed by reference\&. 
.RE
.PP

.PP
Definition at line 144 of file system\&.cpp\&.
.SS "vector< \fBForceActive\fP > & System::listForceActive_user ()"

.PP
Exposes the vector of forceActive_user objects\&. Provides direct access to the vector\&. \fBReturns:\fP
.RS 4
Returns a reference to the vector of forceActive_user objects\&. Variable passed by reference\&. 
.RE
.PP

.PP
Definition at line 216 of file system\&.cpp\&.
.SS "\fBForceActive\fP & System::listForceActive_user (unsigned intforceIndex)"

.PP
Returns reference to the forceActive_user object referenced by the index specified in the input\&. \fBParameters:\fP
.RS 4
\fIforceIndex\fP Integer variable which defines the index of which forceActive_user object to retrieve\&. Variable passed by reference\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a reference to the ForceActive_user object\&. Variable passed by reference 
.RE
.PP

.PP
Definition at line 223 of file system\&.cpp\&.
.SS "vector< \fBForceCross\fP > & System::listForceCross_user ()"

.PP
Exposes the vector of forceCross_user objects\&. Provides direct access to the vector\&. \fBReturns:\fP
.RS 4
Returns a reference to the vector of forceCross_user objects\&. Variable passed by reference\&. 
.RE
.PP

.PP
Definition at line 308 of file system\&.cpp\&.
.SS "\fBForceCross\fP & System::listForceCross_user (unsigned intforceIndex)"

.PP
Returns reference to the forceCross_user object referenced by the index specified in the input\&. \fBParameters:\fP
.RS 4
\fIforceIndex\fP Integer variable which defines the index of which forceCross_user object to retrieve\&. Variable passed by value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a reference to the ForceCross_user object\&. Variable passed by reference 
.RE
.PP

.PP
Definition at line 314 of file system\&.cpp\&.
.SS "vector< \fBForceReact\fP > & System::listForceReact_user ()"

.PP
Exposes the vector of forceReact_user objects\&. Provides direct access to the vector\&. \fBReturns:\fP
.RS 4
Returns a reference to the vector of forceReact_user objects\&. Variable passed by reference\&. 
.RE
.PP

.PP
Definition at line 263 of file system\&.cpp\&.
.SS "\fBForceReact\fP & System::listForceReact_user (unsigned intforceIndex)"

.PP
Returns reference to the forceReact_user object referenced by the index specified in the input\&. \fBParameters:\fP
.RS 4
\fIforceIndex\fP Integer variable which defines the index of which forceReact_user object to retrieve\&. Variable passed by value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a reference to the ForceReact_user object\&. Variable passed by reference 
.RE
.PP

.PP
Definition at line 269 of file system\&.cpp\&.
.SS "std::vector< \fBMotionModel\fP * > & System::listModel ()\fC [slot]\fP"

.PP
Provides access to the full list of motion models\&. Returns a vector to the full list of motion models\&. The list of motion models are all the various model classes available to the system at run time\&. Each object in the vector is a different class, but all classes in the vector are derived from the \fBMotionModel\fP class\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBMotionModel\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a vector of objects of different types\&. Each object is derived from the \fBMotionModel\fP class\&. Returned variable is passed by reference\&. 
.RE
.PP

.PP
Definition at line 446 of file system\&.cpp\&.
.SS "\fBMotionModel\fP & System::listModel (unsigned intindex)\fC [slot]\fP"

.PP
Provides access to one item in the list of motion models\&. Returns a single \fBMotionModel\fP based object\&. Each model will be a different class, but all classes are derived from the \fBMotionModel\fP object\&. Each object in the vector is a different class of motion model\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Integer\&. The index of which item in the vector you want\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns an object of a class derived from the \fBMotionModel\fP class\&. Returned variable is passed by reference\&. 
.RE
.PP

.PP
Definition at line 452 of file system\&.cpp\&.
.SS "\fBMotionModel\fP & System::listModel (std::stringmodelName)\fC [slot]\fP"

.PP
Provides access to one item in the list of motion models\&. Returns a single \fBMotionModel\fP based object\&. Each model will be a different class, but all classes are derived from the \fBMotionModel\fP object\&. Each object in the vector is a different class of motion model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodelName\fP String input\&. The name of the motion model, as specified by the user\&. Must match the predefined name of the model exactly\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns an object of a class derived from the \fBMotionModel\fP class\&. Returned variable is passed by reference\&. 
.RE
.PP

.PP
Definition at line 458 of file system\&.cpp\&.
.SS "vector< \fBOutputsBody\fP > & System::listOutput ()"

.PP
Returns direct access to the list of \fBOutputsBody\fP objects\&. Includes all the properties included by a std::vector<> class\&. \fBReturns:\fP
.RS 4
Returns a vector of \fBOutputsBody\fP objects\&. Returned variable passed by reference\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBOutputsBody\fP 
.RE
.PP

.PP
Definition at line 150 of file system\&.cpp\&.
.SS "\fBOutputsBody\fP & System::listOutput (intinput)"

.PP
Returns direct access to a single \fBOutputsBody\fP object\&. \fBParameters:\fP
.RS 4
\fIinput\fP Specifies the index of which \fBOutputsBody\fP object to access in the list of \fBOutputsBody\fP objects\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns an \fBOutputsBody\fP object\&. Returned variable is passed by reference\&. 
.RE
.PP

.PP
Definition at line 156 of file system\&.cpp\&.
.SS "vector< double > & System::listWaveDirections ()"

.PP
Provides direct access to the list of wave directions\&. \fBReturns:\fP
.RS 4
Pointer to the list of wave directions Variable passed by reference\&. 
.RE
.PP

.PP
Definition at line 96 of file system\&.cpp\&.
.SS "vector< double > & System::listWaveFrequencies ()"

.PP
Provides direct access to the list of wave frequencies\&. \fBReturns:\fP
.RS 4
Pointer to the list of wave frequencies\&. Variable passed by reference\&. 
.RE
.PP

.PP
Definition at line 84 of file system\&.cpp\&.
.SS "void osea::ofreq::System::ReferenceSystem (\fBSystem\fP *mySystem)\fC [signal]\fP"

.PP
Returns the \fBSystem\fP object for information\&. Used mainly to access the list of forced defined for the system object\&. \fBParameters:\fP
.RS 4
\fIReturns\fP a pointer to the \fBSystem\fP object\&. Variable passed by reference\&. 
.RE
.PP

.SS "\fBForceActive\fP * System::refForceActive_user (std::stringforceName)"

.PP
Gets the forceActive_user object referenced by the name specified in the input\&. The Bodies input file will define the forceActive_user object by a name\&. This uses that name to retrieve the forceActive_user object\&. \fBParameters:\fP
.RS 4
\fIforceName\fP std::string input\&. Variable passed by value\&. The name of the forceActive_user object\&. Must match exactly what is defined in the Forces\&.in input file which defines the forceActive_user object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a pointer to the forceActive_user object as requested\&. Pointer passed by value\&. 
.RE
.PP

.PP
Definition at line 190 of file system\&.cpp\&.
.SS "\fBForceCross\fP * System::refForceCross_user (std::stringforceName)"

.PP
Gets the forceCross_user object referenced by the name specified in the input\&. The Bodies input file will define the forceCross_user object by a name\&. This uses that name to retrieve the forceCross_user object\&. \fBParameters:\fP
.RS 4
\fIforceName\fP std::string input\&. Variable passed by value\&. The name of the forceCross_user object\&. Must match exactly what is defined in the Forces\&.in input file which defines the forceCross_user object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a pointer to the forceCross_user object as requested\&. Pointer passed by value\&. 
.RE
.PP

.PP
Definition at line 282 of file system\&.cpp\&.
.SS "\fBForceReact\fP * System::refForceReact_user (std::stringforceName)"

.PP
Gets the forceReact_user object referenced by the name specified in the input\&. The Bodies input file will define the forceReact_user object by a name\&. This uses that name to retrieve the forceReact_user object\&. \fBParameters:\fP
.RS 4
\fIforceName\fP std::string input\&. Variable passed by value\&. The name of the forceReact_user object\&. Must match exactly what is defined in the Forces\&.in input file which defines the forceReact_user object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns a pointer to the forceReact_user object as requested\&. Pointer passed by value\&. 
.RE
.PP

.PP
Definition at line 237 of file system\&.cpp\&.
.SS "void System::setAnalysisType (std::string)\fC [slot]\fP"
Sets the analysis ype\&. 
.PP
\fBParameters:\fP
.RS 4
\fIanalysisTypeIn\fP The analysis type\&. 
.RE
.PP

.PP
Definition at line 330 of file system\&.cpp\&.
.SS "void System::setCurFreqInd (intinput)"

.PP
Sets the current frequency index\&. \fBParameters:\fP
.RS 4
\fIinput\fP Integer specifying the index of the current wave frequency in the list of wave frequencies\&. 
.RE
.PP

.PP
Definition at line 108 of file system\&.cpp\&.
.SS "void System::setCurWaveDirInd (intinput)"

.PP
Sets the current wave index\&. \fBParameters:\fP
.RS 4
\fIinput\fP Integer specifying the index of the current wave direction in the list of wave directions\&. 
.RE
.PP

.PP
Definition at line 102 of file system\&.cpp\&.
.SS "void System::setSpreadModel (std::string)"
Sets the spread model\&. 
.PP
\fBParameters:\fP
.RS 4
\fIspreadIn\fP The spread model\&. 
.RE
.PP

.PP
Definition at line 72 of file system\&.cpp\&.
.SS "void System::setWaveDirections (std::vector< double >)"
Sets the wave directions\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvecIn\fP The list of wave directions\&. 
.RE
.PP

.PP
Definition at line 66 of file system\&.cpp\&.
.SS "void System::setWaveFrequencies (std::vector< double >)"
Sets the wave frequencies\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvecIn\fP The list of wave frequencies\&. 
.RE
.PP

.PP
Definition at line 60 of file system\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for oFreq from the source code\&.
